version: 2.1

commands:
  destroy-environment:
    description: destroy stacks with paramater workflow ID
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy Env
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowId>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowId>>
            aws s3 rm s3://udapeople-<<parameters.workflowId>> --recursive

  install_awscli:
    description: install awscli
    steps:
      - run: 
          name: install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible  -y   
  
  revert-migration:
    description: Revert the last migration
    parameters:
      workflowId:
        type: string
    steps:
      - run: 
          name: revert migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.workflowId>>)
            if (($SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build            
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0

      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: 
             - "frontend-build"
        # Your job code here
        - run: 
            name: Run frontend test
            command: | 
              cd frontend
              npm install
              npm run test

  test-backend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: 
             - "backend-build"
        # Your job code here
        - run: 
            name: Run backend test
            command: | 
              cd backend
              npm install
              npm run test
 
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - "frontend-build"
      # Your job code here
      - run: 
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - "backend-build"
      # Your job code here
      - run: 
          name: Analyze backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            #npm audit --audit-level=critical
            #npm audit fix --force
            #npm audit fix --audit-level=critical --force
            #npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install gzip & tar
          command: |
              yum install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
       # Checkout code from git
        - checkout
        - install_ansible
        - install_awscli
        - add_ssh_keys:
              fingerprints: ["9d:52:e3:97:ae:6e:a3:6c:5f:c0:b2:97:b8:4c:06:81"]
        - attach_workspace:
            at: ~/
        # - run: 
            #  name: install dependencies
            #  command: |
            #    apk add tar gzip ansible
            #    pip3 install awscli
        - run:
           name: configure server
           command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml    
        - destroy-environment:
            workflowId: ${CIRCLE_WORKFLOW_ID:0:7}  
  run-migration:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_awscli
      - run :
          name: Run Migration
          command: |
            cd backend 
            npm install      
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: send migration status to kvdb.io
          command: |
            if grep -q "has been executed seccessfully." ~/project/backend/migrations_dumb.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORLFLOW_ID:0:7} -d '1'
            fi

      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
 
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update -y
            yum install -y tar gzip
            yum install -y python3
            curl -sl https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
            pip3 install ansible
            pip3 install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migration:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs

      - add_ssh_keys:
          fingerprints: ["9d:52:e3:97:ae:6e:a3:6c:5f:c0:b2:97:b8:4c:06:81"]   
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]  
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip -y
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files      
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migration:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs

      - run:
          name: Backend smoke test
          command: |
            # your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            if curl -s $API_URL/api/status | grep "ok"
            then 
              exit 0 
            else
              exit 1
            
            fi 
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then 
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migration:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "current workflow ID : ${CIRCLE_WORKFLOW_ID:0:7}"  
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --tags project=udapeople --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - persist_to_workspace:
          root: ~/    
          paths:
            - OldWorkflowID.txt
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migration:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      # Docker image here
      - image: cimg/base:stable

    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            cat ~/workspace/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/workspace/OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi

workflows:
  udapeople:
      jobs:
        - build-frontend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch
        - build-backend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch        
        - test-frontend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch        
            requires:
              - build-frontend
        - test-backend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch        
            requires:
              - build-backend
        - scan-frontend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch        
            requires:
               - test-frontend # i know that in screenshot it says requires build for scan , but i think its better to require test for better confidence in the code
        - scan-backend:
            filters:
              branches:
                only:
                  - master
                  - dev-branch        
            requires:
                - test-backend
        - deploy-infrastructure:
            filters:
              branches:
                only:
                  - master
        - configure-infrastructure:
            filters:
              branches:
                only:
                  - master        
            requires: 
              - deploy-infrastructure
        - run-migration:
            filters:
              branches:
                only:
                  - master        
            requires:
              - configure-infrastructure
        - deploy-frontend:
            filters:
              branches:
                only:
                  - master        
            requires:
              - run-migration
        - deploy-backend:
            filters:
              branches:
                only:
                  - master        
            requires:
              - run-migration
        - smoke-test:
            filters:
              branches:
                only:
                  - master        
            requires:
              - deploy-frontend
              - deploy-backend
        - cloudfront-update:
            filters:
              branches:
                only:
                  - master        
            requires:
              - smoke-test
        - cleanup:
            filters:
              branches:
                only:
                  - master        
            requires:
              - cloudfront-update
            